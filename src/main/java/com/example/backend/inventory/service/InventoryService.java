package com.example.backend.inventory.service;

import com.example.backend.entity.InventoryTransaction;
import com.example.backend.entity.StockMaster;
import com.example.backend.entity.TransactionType;
import com.example.backend.entity.PurchaseOrder;
import com.example.backend.entity.PurchaseOrderDetail;
import com.example.backend.exception.ResourceNotFoundException;
import com.example.backend.inventory.dto.InventoryDispatchRequest;
import com.example.backend.inventory.dto.InventoryReceiveRequest;
import com.example.backend.inventory.repository.InventoryTransactionRepository;
import com.example.backend.inventory.repository.StockMasterRepository;
import com.example.backend.order.dto.InventoryReceiveFromOrderRequest;
import com.example.backend.order.repository.PurchaseOrderDetailRepository;
import com.example.backend.order.repository.PurchaseOrderRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.UUID;
import jakarta.validation.ValidationException;

@Service
public class InventoryService {

    private final StockMasterRepository stockMasterRepository;
    private final InventoryTransactionRepository inventoryTransactionRepository;
    private final PurchaseOrderRepository purchaseOrderRepository;
    private final PurchaseOrderDetailRepository purchaseOrderDetailRepository;

    @Autowired
    public InventoryService(StockMasterRepository stockMasterRepository,
            InventoryTransactionRepository inventoryTransactionRepository,
            PurchaseOrderRepository purchaseOrderRepository,
            PurchaseOrderDetailRepository purchaseOrderDetailRepository) {
        this.stockMasterRepository = stockMasterRepository;
        this.inventoryTransactionRepository = inventoryTransactionRepository;
        this.purchaseOrderRepository = purchaseOrderRepository;
        this.purchaseOrderDetailRepository = purchaseOrderDetailRepository;
    }

    // „Éë„É©„É°„Éº„Çø„Éº‰ªòÂú®Â∫´Ê§úÁ¥¢
    public Page<StockMaster> searchStock(String itemCode, String itemName, String category, String modelNumber,
            Pageable pageable) {

        // Á©∫„ÅÆÂ†¥Âêà„ÅØÁ©∫ÊñáÂ≠ó„Å´Â§âÊèõÔºàÈÉ®ÂàÜ‰∏ÄËá¥Ê§úÁ¥¢„Å´ÂØæÂøúÔºâ
        String itemCodeKeyword = (itemCode != null) ? itemCode : "";
        String itemNameKeyword = (itemName != null) ? itemName : "";
        String categoryKeyword = (category != null) ? category : "";
        String modelNumberKeyword = (modelNumber != null) ? modelNumber : "";

        System.out.printf(
                "üîç Ê§úÁ¥¢Êù°‰ª∂: itemCodeKeyword='%s', itemNameKeyword='%s', categoryKeyword='%s', modelNumberKeyword='%s'%n",
                itemCodeKeyword, itemNameKeyword, categoryKeyword, modelNumberKeyword);

        if (!isBlank(itemCode)) {
            System.out.printf("!isBlank(itemCode)");
            // itemCode „ÅØ‰∏ÄÊÑè„Å™„ÅÆ„Åß‰ªñ„ÅÆÊù°‰ª∂„ÇíÁÑ°Ë¶ñ„Åó„Å¶„Çà„ÅÑ
            return stockMasterRepository.findByItemCodeContaining(itemCode, pageable);
        }
        // itemCode „ÅåÁ©∫„ÅÆÂ†¥Âêà„ÄÅ‰ªñ„ÅÆÊù°‰ª∂„ÅßÊ§úÁ¥¢
        return stockMasterRepository
                .findByItemCodeContainingAndItemNameContainingAndCategoryContainingAndModelNumberContaining(
                        itemCodeKeyword, itemNameKeyword,
                        categoryKeyword, modelNumberKeyword, pageable);
    }

    // Âçò‰∏ÄÂú®Â∫´ÂèñÂæó
    public StockMaster getStockByItemCode(String itemCode) {
        return stockMasterRepository.findById(itemCode)
                .orElseThrow(() -> new ResourceNotFoundException("Item not found: " + itemCode));
    }

    // Êñ∞Ë¶èÂú®Â∫´ÁôªÈå≤
    public StockMaster createStock(StockMaster stockMaster) {
        return stockMasterRepository.save(stockMaster);
    }

    // ÂÖ•Â∫´Âá¶ÁêÜ
    public Long receiveInventory(InventoryReceiveRequest req) {
        // 1. „É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂèñÂæó
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        req.setOperator(username);

        // 2. Ë©≤ÂΩìÂú®Â∫´„Éá„Éº„Çø„ÇíÂèñÂæóÔºà„Å™„Åë„Çå„Å∞„Ç®„É©„ÉºÔºâ
        StockMaster stock = stockMasterRepository.findById(req.getItemCode())
                .orElseThrow(() -> new ResourceNotFoundException("Âú®Â∫´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"));

        // 3. Ëá™Âãï„Åß orderNo „ÇíÁô∫Ë°å
        String orderNo = generateNewOrderNo();

        // 4. Áô∫Ê≥®„Éò„ÉÉ„ÉÄ„Éº„Çí„ÇíÊñ∞Ë¶è‰ΩúÊàê ‚ÄªÁô∫Ê≥®„ÇíÈ£õ„Å∞„Åó„ÅüÂÖ•Â∫´„Å†„ÅåÂçò‰æ°„ÇÑ‰ªïÂÖ•„ÇåÂÖà„ÅåÂàÜ„Åã„Çã„Ç±„Éº„Çπ„ÇíËÄÉÊÖÆ
        PurchaseOrder order = new PurchaseOrder();
        order.setOrderNo(orderNo);
        order.setOrderDate(LocalDate.now());
        order.setShippingFee(BigDecimal.ZERO);
        order.setOperator(username);
        order.setSupplier(req.getSupplier());
        order.setRemarks(req.getRemarks());
        order.setOrderSubtotal(BigDecimal.ZERO);
        purchaseOrderRepository.save(order);

        // 5. ÂÖ•Â∫´„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥ÁôªÈå≤
        InventoryTransaction tx = new InventoryTransaction();
        tx.setStockItem(stock);
        tx.setPurchaseOrder(order);
        tx.setTransactionType(TransactionType.MANUAL_RECEIVE);
        tx.setQuantity(req.getQuantity());
        tx.setOperator(username);
        tx.setTransactionTime(LocalDateTime.now());
        tx.setManufacturer(req.getManufacturer());
        tx.setSupplier(req.getSupplier());
        tx.setPurchasePrice(req.getPurchasePrice());
        tx.setRemarks(req.getRemarks());
        inventoryTransactionRepository.save(tx);

        // 6. Âú®Â∫´Êï∞„ÇíÊõ¥Êñ∞
        stock.setCurrentStock(stock.getCurrentStock().add(req.getQuantity()));
        stockMasterRepository.save(stock);

        // 7. Áô∫Ê≥®Â∞èË®à„ÇíÂä†ÁÆó
        BigDecimal lineTotal = req.getPurchasePrice().multiply(req.getQuantity());
        order.setOrderSubtotal(order.getOrderSubtotal().add(lineTotal));
        purchaseOrderRepository.save(order);

        // Áô∫Ë°å„Åï„Çå„Åü„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥ID„ÇíËøî„Åô
        System.out.println(tx.getTransactionId());
        return tx.getTransactionId();
    }

    // Ëá™ÂãïÁô∫Áï™„É°„ÇΩ„ÉÉ„Éâ
    private String generateNewOrderNo() {
        return "PO-" + LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd")) +
                "-" + UUID.randomUUID().toString().substring(0, 4).toUpperCase();
    }

    // „Ç∑„É≥„Éó„É´„Å™Âá∫Â∫´Âá¶ÁêÜ
    public Long dispatchInventory(InventoryDispatchRequest req) {
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        req.setOperator(username);

        StockMaster stock = stockMasterRepository.findById(req.getItemCode())
                .orElseThrow(() -> new ResourceNotFoundException("Âú®Â∫´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"));

        if (stock.getCurrentStock().compareTo(req.getQuantity()) < 0) {
            throw new RuntimeException("Âú®Â∫´„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô");
        }

        InventoryTransaction tx = new InventoryTransaction();
        tx.setStockItem(stock);
        tx.setTransactionType(TransactionType.MANUAL_DISPATCH);
        tx.setQuantity(req.getQuantity());
        tx.setRemarks(req.getRemarks());
        tx.setOperator(username);
        tx.setTransactionTime(LocalDateTime.now());
        inventoryTransactionRepository.save(tx);

        stock.setCurrentStock(stock.getCurrentStock().subtract(req.getQuantity()));
        stockMasterRepository.save(stock);

        return tx.getTransactionId();
    }

    // „Éö„Éº„Ç∏„É≥„Ç∞Ê©üËÉΩ
    public Page<InventoryTransaction> getTransactionHistory(String itemCode, Pageable pageable) {
        return inventoryTransactionRepository.findByStockItemItemCodeOrderByTransactionTimeDesc(itemCode, pageable);
    }

    // ÂÖ®ÂèñÂºïÂ±•Ê≠¥Èñ≤Ë¶ß
    public Page<InventoryTransaction> getAllTransactionHistory(Pageable pageable) {
        return inventoryTransactionRepository.findAllByOrderByTransactionTimeDesc(pageable);
    }

    // Áô∫Ê≥®ÂïÜÂìÅ„ÅÆÁ¥çÂìÅÂá¶ÁêÜ
    @Transactional
    public void receiveFromOrder(InventoryReceiveFromOrderRequest req) {
        String orderNo = req.getOrderNo();
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        req.setOperator(username);

        PurchaseOrder order = purchaseOrderRepository.findById(req.getOrderNo())
                .orElseThrow(() -> new ResourceNotFoundException("Áô∫Ê≥®ÂÖà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"));

        for (InventoryReceiveFromOrderRequest.Item item : req.getItems()) {
            String itemCode = item.getItemCode();

            // üîΩ „Åì„Åì„Åß DB „Åã„ÇâÂçò‰æ°„ÇíÂèñÂæó
            BigDecimal purchasePrice = purchaseOrderDetailRepository
                    .findByOrderNoAndItemCode(orderNo, itemCode)
                    .map(PurchaseOrderDetail::getPurchasePrice)
                    .orElse(BigDecimal.ZERO); // fallbackÔºà„Åæ„Åü„ÅØ‰æãÂ§ñÊäï„Åí„ÇãÔºâ

            // Áô∫Ê≥®ÊòéÁ¥∞„ÇíÂèñÂæó
            PurchaseOrderDetail detail = purchaseOrderDetailRepository
                    .findByOrderNoAndItemCode(req.getOrderNo(), itemCode)
                    .orElseThrow(() -> new ResourceNotFoundException(
                            "Áô∫Ê≥®ÊòéÁ¥∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºàorderNo: " + req.getOrderNo() + ", itemCode: " + itemCode + "Ôºâ"));

            // ‚ñº „Åì„Åì„ÅßÂèó„ÅëÂÖ•„ÇåÊ∏à„ÅøÊï∞Èáè„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËøΩÂä†
            BigDecimal receivedSoFar = detail.getReceivedQuantity() != null ? detail.getReceivedQuantity()
                    : BigDecimal.ZERO;
            BigDecimal orderQuantity = detail.getQuantity();
            BigDecimal receivingNow = item.getReceivedQuantity();

            if (receivedSoFar.compareTo(orderQuantity) >= 0) {
                throw new ValidationException("„Åô„Åß„Å´ÂÖ®Êï∞„ÅåÂÖ•Â∫´Ê∏à„Åø„ÅÆ„Åü„ÇÅ„ÄÅ„Åì„Çå‰ª•‰∏äÂèó„ÅëÂÖ•„Çå„Åß„Åç„Åæ„Åõ„ÇìÔºàitemCode: " + itemCode + "Ôºâ");
            }

            if (receivedSoFar.add(receivingNow).compareTo(orderQuantity) > 0) {
                throw new ValidationException("Âèó„ÅëÂÖ•„ÇåÊï∞„ÅåÁô∫Ê≥®Êï∞„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„ÅôÔºàitemCode: " + itemCode + "Ôºâ");
            }

            // Âú®Â∫´„Éû„Çπ„Çø„ÇíÂèñÂæó
            StockMaster stock = stockMasterRepository.findById(itemCode)
                    .orElseThrow(() -> new ResourceNotFoundException("Âú®Â∫´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"));

            // ÂÖ•Â∫´Êï∞„ÉÅ„Çß„ÉÉ„ÇØ
            BigDecimal totalReceived = detail.getReceivedQuantity().add(item.getReceivedQuantity());

            if (totalReceived.compareTo(detail.getQuantity()) > 0) {
                throw new IllegalArgumentException("ÂèóÈ†òÊï∞„ÅåÁô∫Ê≥®Êï∞„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô: " + itemCode);
            }

            // Âú®Â∫´Êï∞Êõ¥Êñ∞
            stock.setCurrentStock(stock.getCurrentStock().add(item.getReceivedQuantity()));
            stockMasterRepository.save(stock);

            // ÊòéÁ¥∞Êõ¥Êñ∞
            detail.setReceivedQuantity(totalReceived);
            // .compareTo() „ÅØ 0 „ÇíËøî„Åô„Å®„ÄåÁ≠â„Åó„ÅÑ„Äç„ÄÅÊ≠£„Å™„Çâ„ÄåÂ§ß„Åç„ÅÑ„Äç„ÄÅË≤†„Å™„Çâ„ÄåÂ∞è„Åï„ÅÑ„Äç„ÄÇ
            if (totalReceived.compareTo(detail.getQuantity()) >= 0) {
                detail.setStatus("ÂÆå‰∫Ü");
            } else if (totalReceived.compareTo(BigDecimal.ZERO) > 0) {
                detail.setStatus("‰∏ÄÈÉ®ÂÖ•Â∫´");
            } else {
                detail.setStatus("Êú™ÂÖ•Â∫´");
            }
            purchaseOrderDetailRepository.save(detail);

            // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥ÁôªÈå≤
            InventoryTransaction tx = new InventoryTransaction();
            tx.setPurchaseOrder(order);
            tx.setOperator(req.getOperator());
            tx.setStockItem(stock);
            tx.setQuantity(item.getReceivedQuantity());
            tx.setPurchasePrice(purchasePrice);
            tx.setTransactionType(TransactionType.PURCHASE_RECEIVE);
            tx.setOperator(req.getOperator());
            tx.setTransactionTime(LocalDateTime.now());
            tx.setRemarks(item.getRemarks());
            inventoryTransactionRepository.save(tx);
        }

        // ÂÖ®ÊòéÁ¥∞„ÅåÂÆå‰∫Ü„ÅãÂà§ÂÆö„Åó„Å¶„Éò„ÉÉ„ÉÄ„Éº„Å´ÂèçÊò†
        boolean allDone = purchaseOrderDetailRepository.findByOrderNo(req.getOrderNo())
                .stream()
                .allMatch(d -> "ÂÆå‰∫Ü".equals(d.getStatus()));

        if (allDone) {
            order.setStatus("ÂÆå‰∫Ü");
            purchaseOrderRepository.save(order);
        }
    }

    private boolean isBlank(String value) {
        return value == null || value.isBlank();
    }

    // // Á©∫ÊñáÂ≠ó„ÇÑnull„Çí„Åô„Åπ„Å¶ "%" „Å´Â§âÊèõ
    private String normalize(String value) {
        return (value == null || value.isBlank()) ? "%" : value;
    }
}
